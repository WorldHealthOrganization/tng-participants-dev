# This workflow will install Python dependencies and run tests 
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Quality Assurance (Certificates)
on:
  pull_request: 
    types: [ opened, synchronize, reopened, edited, review_request_removed ] 
jobs:
  certificate-check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    if: contains(github.head_ref, 'onboardingRequest')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Checkout participants repo for QA checks
      uses: actions/checkout@v4
      with:
        repository: WorldHealthOrganization/tng-participant-template
        path: scripts
        sparse-checkout: |
          scripts/requirements.txt scripts/tests
    - name: List of current folder
      run: |
        ls -ls
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f scripts/requirements.txt ]; then pip install -r scripts/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Exclude .git and other unnecessary directories
      run: |
        echo "/*" > .git/info/sparse-checkout
        echo "!/*/" >> .git/info/sparse-checkout
        echo "!scripts/tests" >> .git/info/sparse-checkout
        echo "!scripts/requirements.txt" >> .git/info/sparse-checkout
        git sparse-checkout init --cone
        git sparse-checkout set scripts/tests scripts/requirements.txt
    - name: List of qa/tests folder
      run: |
        echo "List of current folder"
        ls -ls
        echo "List of qa/tests folder"
        ls -la qa/tests
    - name: Run QA checks
      run: |
        pytest -vs qa/tests/scripts/tests/test_certs.py --country-mode -C ${{ github.head_ref }} --tb=short -rfEx --md-report --md-report-verbose=1 --md-report-zeros=number --html=tng_onboarding_qa.html --self-contained-html --junit-xml=pytest.xml
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        files: |
          pytest.xml


